import angr
import claripy

# Create an angr project for the binary
proj = angr.Project("D:\Projects\Malware_Project\Project 01\Stardust.EXE", load_options={'auto_load_libs':False})

# Initialize the state with symbolic registers and memory
state = proj.factory.entry_state()

# Define symbolic variables for each register
rax = claripy.BVS('rax', 64)
rbx = claripy.BVS('rbx', 64)
rcx = claripy.BVS('rcx', 64)
rdx = claripy.BVS('rdx', 64)

# Store values in the registers
state.registers.store('rax', rax)
state.registers.store('rbx', rbx)
state.registers.store('rcx', rcx)
state.registers.store('rdx', rdx)

# Read values from the registers
rax_val = state.solver.eval(rax)
rbx_val = state.solver.eval(rbx)
rcx_val = state.solver.eval(rcx)
rdx_val = state.solver.eval(rdx)

# Print out the values
print('rax =', hex(rax_val))
print('rbx =', hex(rbx_val))
print('rcx =', hex(rcx_val))
print('rdx =', hex(rdx_val))
